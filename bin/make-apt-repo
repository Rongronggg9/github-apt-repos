#!/bin/sh
# Make an apt repo hosted on GitHub

set -xe


gh_get_latest_release_url() {
    # Assume this checkout is placed somewhere in the GitHub repo with
    # the releases
    # TODO Rethink re-use in general
    cd ..

    # Derive the latest GitHub release URL
    # TODO replace with GitHub API usage
    # Get the repo URL from the origin remote
    gh_repo_path=$(git remote get-url origin)
    # Strip any *.git suffix
    gh_repo_path=${gh_repo_path%.git}
    # Strip SSH or HTTPS GitHub remote URL prefix
    gh_repo_path=${gh_repo_path#https://github.com/}
    gh_repo_path=${gh_repo_path#git@github.com:}

    # Get the latest release redirect target URL
    # workaround the fact that wget won't do recursive downloding on
    # the redirect target
    gh_latest_release_url=$(
	wget "https://github.com/$gh_repo_path/releases/latest" 2>&1 |
	    grep '^Location:' | tail -n 1)
    # Strip the wget prefix and suffix
    gh_latest_release_url=${gh_latest_release_url#Location: }
    echo ${gh_latest_release_url% \[following\]}
}


download_latest_debs() {
    # download all the *.deb files for the latest release
    $DEBUG wget -r -nH --cut-dirs=2 -e robots=off -c \
	   -l 1 -A deb "$(gh_get_latest_release_url)"
}


make_apt_repo() {
    mkdir -p releases/download/apt
    cd releases/download/apt
    dpkg-scanpackages -m .. /dev/null | gzip -9c > Packages.gz
    apt-ftparchive release . >Release
    gpg --clearsign -o InRelease Release
    gpg -abs -o Release.gpg Release
}


main() {
    download_latest_debs
    make_apt_repo
}

main
